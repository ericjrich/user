#ALIAS FILE:
# A L I A S  F I L E
#20231008_13:22_est--EJR

### VARS: LOCATIONS #####################################################################
#add 2nd usb and ventoy sections to both
USB_Home="/media/$USER/YOUR-USB-DEVICE/user/"
USB_Ame="$USB_Home/a-me"; PC_Ame="$HOME/a-me"
USB_Ame_Share="$USB_Ame/z-share"; PC_Ame_Share="$PC_Ame/z-share"
USB_Ame_Share_Music="$USB_Ame_Share/z-music"; PC_Ame_Share_Music="$PC_Ame_Share/z-music"
USB_Ame_Bin="$USB_Ame/bin"; PC_Ame_Bin="$PC_Ame/bin"

### VARS: COMMANDS ######################################################################
zxterm='x-terminal-emulator -e'
z2run='>>/dev/null 2>&1 & disown'
ztta='history -s'
zttz='sleep 1s; xdotool key Up 1>/dev/null; echo'

### FUNCTIONS: DEPS #######################################################################################################################
eatz() { local cmd="$1"; history -s "$cmd"; sleep .5; xdotool key --clearmodifiers Up 1>/dev/null; echo; }
e-askyn.efd() { echo -n "$1 [y/n]"; read -n 1 askyn < /dev/tty; echo; if [ "${askyn,,}" = "y" ]; then return 0; else return 1; fi; }
e-crab.efd() { read -n 1 -p "$1 *ANY-KEY*"; echo; }
e-crap.efd() { read -n 1 -p '*ANY-KEY*'; echo; }
e-sanity.efd() { read -n 1 -p '=== CONTINUE === ...(y/n)...' san; echo; [ "${san,,}" != "y" ] && exit 0; echo; }

### FUNCTIONS: MISC #######################################################################################################################
e-efidel.ef() { clear; local LV1=''; local LV2=''; sudo efibootmgr; read -p "Enter the number of the boot entry you want to delete: " LV1; read -p "Are you sure you want to delete boot entry $LV1? (y/n): " LV2; if [ "$LV2" == "y" ] || [ "$LV2" == "Y" ]; then sudo efibootmgr -b "$LV1" -B; echo "Boot entry $LV1 has been deleted."; else echo "Operation canceled."; fi; }

e-iso2usb.ef() {
  local viso=$(zenity --title='IsoToUsb: Choose ISO' --file-selection --file-filter='*.iso *.ISO')
    if [ $? -ne 0 ]; then zenity --error --text="No ISO file selected. Exiting."; return 1; fi
  local vusb=$(zenity --title='IsoToUsb: Choose USB Device' --file-selection --directory)
    if [ $? -ne 0 ]; then zenity --error --text="No USB drive selected. Exiting."; return 1; fi
  vusb=$(df -h "$vusb" | awk 'NR==2 {print $1}' | sed 's/[0-9]*$//')
  zenity --question --text="Are you sure you want to write the ISO to $vusb?"
    if [ $? -ne 0 ]; then zenity --info --text="Operation canceled. Exiting."; return 1; fi
  echo -e "\n\n\n=== Writing Iso To Usb ===\nFrom: $viso\n  To: $vusb\n"
  sudo dd if="$viso" of="$vusb" bs=4M status=progress
}

e-opus4mp3.ef() {
  local ins=$(zenity --title='Selects MP3s To Convert To OPUS files' --file-selection --multiple --separator=$'\n' --file-filter="MP3 files | *.mp3"); [ $? == 1 ] && return
  local odir=$(zenity --title='Output DIR ??' --file-selection --directory); [ $? == 1 ] && return
  for i in $ins; do
    local bn=$(basename "$i" .mp3)
    local out="$odir/$bn.opus"
    ffmpeg -i "$i" -c:a libopus -b:a 16k "$out"
    echo '***** Converted $i to $out *****'
  done
}
e-av-joiner.ef() { local ztmp="/tmp/join.txt"; local input_files=$(zenity --title='Select AV Files To JOIN' --file-selection --multiple --separator=$'\n' --file-filter='*.*'); if [ $? == 1 ]; then return; fi; local outname=$(zenity --width=400 --height=200 --entry --title='NAME OUTPUT FILE' --text='Name Output File with ext:' --entry-text "name.ext"); if [ $? == 1 ]; then return; fi; local output_dir=$(zenity --file-selection --directory --title='Select Output Folder'); if [ $? == 1 ]; then return; fi; zenity --width=700 --height=700 --info --title='Files To Be Joined:' --text="$input_files\n---Destination---\n$output_dir/$outname"; if [ $? == 1 ]; then return; fi; echo -e "$input_files" >$ztmp; sed -i -e "s/^/file '/" $ztmp; sed -i -e "s/$/'/" $ztmp; ffmpeg -f concat -safe 0 -i $ztmp -c copy "${output_dir}/$outname"; rm $ztmp; }
e-csv-combiner.ef() { rm /tmp/head.csv /tmp/nohead.csv /tmp/body.csv; zins=$(zenity --title='Select CSV Files' --file-selection --multiple --file-filter='CSV files | *.csv' --separator=' '); zout=$(zenity --title='Save Output Csv File' --file-selection --save --confirm-overwrite --file-filter='CSV files | *.csv'); if [ -z "$zins" ] || [ -z "$zout" ]; then zenity --error --text "File selection canceled."; return; fi; for i in ${zins}; do head -n 1 "$i" > /tmp/head.csv; done; for i in ${zins}; do tail -n +2 "$i" >> /tmp/nohead.csv; done; sort -u /tmp/nohead.csv -o /tmp/body.csv; cat /tmp/head.csv /tmp/body.csv > "$zout"; sed -i -e '$a\' "$zout"; rm /tmp/head.csv /tmp/nohead.csv /tmp/body.csv; }
e-duplicate-checker.ef() { clear; declare -A seen_files; for file in *; do [[ -f "$file" ]] || continue; checksum=$(md5sum "$file" | cut -d' ' -f1); if [[ ${seen_files[$checksum]} ]]; then echo "Found a duplicate: $file"; else seen_files[$checksum]=$file; fi; done; }
e-duplicate-deleter.ef() { clear; declare -A seen_files; for file in *; do [[ -f "$file" ]] || continue; checksum=$(md5sum "$file" | cut -d' ' -f1); if [[ ${seen_files[$checksum]} ]]; then echo "-----Deleting: $file-----"; sudo rm "$file"; else seen_files[$checksum]=$file; fi; done; }
e-eject.ef() { echo "Drives available for ejection:"; lsblk -o NAME,SIZE,TYPE,MOUNTPOINT; read -p "Enter the drive you want to eject (e.g., sdd): " drive
  [ -z "$drive" ] && echo "Drive selection canceled."; return 0
  echo "Ejecting drive $drive..."; sudo eject "/dev/$drive"; while mount | grep -q "/dev/$drive"; do echo "Waiting for the drive to be unmounted..."; sleep 2; done
  echo -e "We Safely Ejected The Drive:\n $drive\tPlease Continue To Rock on! ðŸŽ¸"; }
e-http-serve-gui.ef() { local directory; directory=$(zenity --file-selection --directory --title="Select a directory to serve" 2>/dev/null); if [[ -n "$directory" ]]; then cd "$directory" || return; python3 -m http.server; fi; }
e-img-pdf2jpeg-gui.ef() { local input_files=$(zenity --file-selection --title="Select PDF files" --file-filter="PDF files | *.pdf" --multiple --separator=$'\n' 2>/dev/null); if [ -z "$input_files" ]; then echo "No PDF files selected."; return 1; fi; for i in $is; do opre="${i%.pdf}"; pdftoppm -jpeg "$i" "$opre"; done; }
e-img-pdf2png-gui.ef() { local input_files=$(zenity --file-selection --title="Select PDF files" --file-filter="PDF files | *.pdf" --multiple --separator=$'\n' 2>/dev/null); if [ -z "$input_files" ]; then echo "No PDF files selected." ;return 1; fi; for i in $input_files; do opre="${i%.pdf}"; pdftoppm -png "$i" "$opre"; done; }
e-img-pdf-gui.ef() { local input_files=$(zenity --file-selection --title="Select image files" --file-filter="Image files | *.png *.jpg *.jpeg" --multiple --separator=$'\n' 2>/dev/null); if [ -z "$input_files" ]; then echo "No image files selected."; return 1; fi; local output_file=$(zenity --file-selection --save --confirm-overwrite --title='Save: NAME.pdf'); if [ -z "$output_file" ]; then echo "No output file selected."; return 1; fi; img2pdf $input_files -o "$output_file"; }

e-img-stack-gui.ef() { local ins=$(zenity --file-selection --title='SELECT IMAGES (stack)' --file-filter="Image files | *.png *.jpg *.jpeg" --multiple --separator=$'\n' 2>/dev/null); [ -z "$ins" ] && return 1; local out=$(zenity --file-selection --save --confirm-overwrite --title='Save: NAME.EXT (png; jpg; etc..)'); [ -z "$out" ] && return 1; convert -append $ins "$out"; }

e-io-vid2loudness-gui.ef() { local input=$(zenity --file-selection --title="Select Video File" --file-filter="Video files | *.mp4 *.avi *.mkv *.mov *.flv *.wmv *.webm *.m4v" --file-filter="All files | *"); if [ -z "$input" ]; then zenity --error --text="No file selected. Exiting."; return 1; fi; local vol; clear; echo 'Enter Volume Multiplier Number'; read vol; local old="${input%.${input##*.}}-OLD.${input##*.}"; mv "$input" "$old"; rm $input; ffmpeg -i "$old" -af volume="$vol" -c:v copy "$input"; rm "$old"; }
e-io-vid2trim-gui.ef() { local input=$(zenity --file-selection --title="Select Video to Chop"); if [[ -z "$input" ]]; then echo "No video selected. Aborting."; return 1; fi; local filename=$(basename "$input"); local extension="${filename##*.}"; local filename_noext="${filename%.*}"; local output="$input"; local old="$filename_noext-old.$extension"; mv "$input" "$old"; celluloid "$old" & sleep .5; local start_time=$(zenity --entry  --title='START?' --text='HH:MM:SS' --entry-text="00:00:00"); local end_time=$(zenity --entry --title='END?' --text='HH:MM:SS' --entry-text="$start_time"); pkill celluloid; ffmpeg -i "$old" -ss "$start_time" -to "$end_time" -c:v copy -c:a copy "$output"; rm "$old"; clear; echo "Done: $output"; }
e-save-file2pc-notes_zip-gui.ef() { local input_file; local zip_file="$HOME/a-me/z-share/e-notes.zip"; if [ ! -f "$zip_file" ]; then echo "Destination is not mounted or doesn't exist!"; return 1; fi; input_file=$(zenity --file-selection --title='Select File To Add To Notes Archive'); if [ ! -n "$input_file" ]; then echo "No file selected, you script-slinging lunatic!"; return 1; fi; zip -r "$zip_file" "$input_file"; echo "$input_file added to $zip_file"; }
e-save-file2pc-personalsort_dir-gui.ef() { local input_file; local target_dir="$HOME/a-me/YOUR-PERSONAL-FOLDER/a/z-sort"; if [ ! -d "$target_dir" ]; then echo "Destination is not mounted or doesn't exist!"; return 1; fi; input_file=$(zenity --file-selection --title='Select File To Add To Personal-zsort Folder'); if [ ! -n "$input_file" ]; then echo "No file selected!"; return 1; fi; cp "$input_file" "$target_dir/"; echo "$input_file added to $target_dir/"; }
e-save-file2usb-notes_zip-gui.ef() { local input_file; local zip_file="/media/$USER/YOUR-USB-DEVICE/user/a-me/z-share/e-notes.zip"; if [ ! -f "$zip_file" ]; then echo "Destination is not mounted or doesn't exist!"; return 1; fi; input_file=$(zenity --file-selection --title='Select File To Add To Notes Archive'); if [ ! -n "$input_file" ]; then echo "No file selected, you script-slinging lunatic!"; return 1; fi; zip -r "$zip_file" "$input_file"; echo "$input_file added to $zip_file"; }
e-save-file2usb-personalsort_dir-gui.ef() { local input_file; local target_dir="/media/$USER/YOUR-USB-DEVICE/user/a-me/YOUR-PERSONAL-FOLDER/a/z-sort"; if [ ! -d "$target_dir" ]; then echo "Destination is not mounted or doesn't exist!"; return 1; fi; input_file=$(zenity --file-selection --title='Select File To Add To Personal-zsort Folder'); if [ ! -n "$input_file" ]; then echo "No file selected!"; return 1; fi; cp "$input_file" "$target_dir/"; echo "$input_file added to $target_dir/"; }
e-yt2mp3.ef() { echo 'YT>>MP3: URL?'; read ytu; [ -z "$ytu" ] && exit 0
  echo 'YT>>MP3: BaseName?'; read ytn; [ -z "$ytn" ] && exit 0
  ytn="$ytn.mp3"; yt-dlp -f bestaudio -x --audio-format mp3 --audio-quality 0 --output "$ytn" "$ytu"; }
e-yt2mp4.ef() { echo 'YT>>MP4: URL?'; read ytu; [ -z "$ytu" ] && exit 0
  echo 'YT>>MP4: BaseName?'; read ytn; [ -z "$ytn" ] && exit 0
  ytn="$ytn.mp4"; yt-dlp -f best --output "$ytn" "$ytu"; }

function e-url2githubpreview.ef() {
    local input_url
    read -p "Enter the GitHub Url To Make into a URL: " input_url
    local previewed_url="https://htmlpreview.github.io/?$input_url"
    echo "Previewed URL: $previewed_url"
    echo -n "$previewed_url" | xclip -selection clipboard
    echo "URL copied to clipboard."
}

###########################################################################################################################################
# GPG/PGP


# CODE
alias e-zzclean.ea='echo "#!/usr/bin/env bash" | tee "$HOME/a-me/bin/e-zz.eb" "$HOME/a-me/bin/e-zzz.eb"; echo "ZZ files cleaned"'
e-code-shebang-to-clipboard.ef() { codetmp="#!/usr/bin/env bash"; echo -n "$codetmp" | xclip -selection clipboard; }
e-code-mma-to-clipboard.ef() { codetmp="$HOME/a-me/z-share/code/mma.txt"; cat "$codetmp" | xclip -selection clipboard; }
e-code-pybash-to-clipboard.ef() { codetmp="$HOME/a-me/z-share/code/pybash.txt"; cat "$codetmp" | xclip -selection clipboard; }
e-code-funcs-to-clipboard.ef() { codetmp="$HOME/a-me/z-share/code/funcs.txt"; cat "$codetmp" | xclip -selection clipboard; }
e-code-yad-to-clipboard.ef() { codetmp="$HOME/a-me/z-share/code/yad.txt"; cat "$codetmp" | xclip -selection clipboard; }
e-code-echo-e-to-clipboard.ef() { codetmp="$HOME/a-me/z-share/code/echo-e.txt"; cat "$codetmp" | xclip -selection clipboard; }
e-code-csv2html-to-clipboard.ef() { codetmp="$HOME/a-me/z-share/code/csv2html.txt"; cat "$codetmp" | xclip -selection clipboard; }
e-code-zenity-to-clipboard.ef() { codetmp="$HOME/a-me/z-share/code/zenity.txt"; cat "$codetmp" | xclip -selection clipboard; }
e-code-html-to-clipboard.ef() { codetmp="$HOME/a-me/z-share/code/html.txt"; cat "$codetmp" | xclip -selection clipboard; }

#time
alias e-ts.eb='echo -n "$(date -u +"%Y%m%d%H%M")" | xclip -selection clipboard'
alias e-ts-ejr.eb='echo -n "#$(date -u +"%Y%m%d%H%M")_utc_EJR" | xclip -selection clipboard'


# basics
alias c='clear'; alias C='clear'
alias cc='clear && ls -a'; alias CC='clear && ls -a'
alias ct='clear; tree -a'; alias CT='clear; tree -a'
alias EXIT='exit'
alias POWEROFF='poweroff'
alias REBOOT='reboot'
alias e-ownthis.ea='sudo chown -R "$USER":"$GROUP" .; sudo chmod -R 755 .; clear; ls -la'
alias e-reset-cinna.ea='cinnamon --replace > /dev/null 2>&1 & disown'

# Python3
alias python='python3'
alias pythonx='python3 -c'
alias e-python-install-pips.ea='cd ~/a-me/; 7z x YOUR-PERSONAL-FOLDER.7z; rm YOUR-PERSONAL-FOLDER.7z; cd -; pip3 install --upgrade yt-dlp; pip3 install mnemonic ecdsa pycryptodome pyperclip qrcode base58'


###########################################################################################################################################
########################

alias e-user2-raw.ea='rsync -avh --progress --delete --exclude=lost+found/ "/media/$USER/YOUR-USB-DEVICE/user/" ./'
alias e-user2-raw-lock.ea='rsync -avh --progress --delete --exclude=lost+found/ "/media/$USER/YOUR-USB-DEVICE/user/" ./; cd a-me/; 7z a -mx=1 -p -mhe=on YOUR-PERSONAL-FOLDER.7z YOUR-PERSONAL-FOLDER; rm -r YOUR-PERSONAL-FOLDER; cd -'
alias e-cubicraw.ea='rsync -avh --progress --delete --exclude=lost+found/ "/media/$USER/YOUR-USB-DEVICE/user/" ./; cd a-me/; 7z a -mx=1 -p -mhe=on YOUR-PERSONAL-FOLDER.7z YOUR-PERSONAL-FOLDER; rm -r YOUR-PERSONAL-FOLDER; cd -'
alias e-cubic7z.ea='t=$(pwd); cd /media/$USER/YOUR-USB-DEVICE/user/; 7z a -mx=1 -p -mhe=on "$t/user-$(date +%Y%m%d_%H%M_est).7z" .; cd -'
alias e-user2-raw-unlock.ea='cd ~/a-me/; 7z x YOUR-PERSONAL-FOLDER.7z; rm YOUR-PERSONAL-FOLDER.7z; cd -'
alias e-user2-7z-lock.ea='t=$(pwd); cd /media/$USER/YOUR-USB-DEVICE/user/; 7z a -mx=1 -p -mhe=on "$t/user-$(date +%Y%m%d_%H%M_est).7z" .; cd -'
alias e-user2-7z.ea='t=$(pwd); cd /media/$USER/YOUR-USB-DEVICE/user/; 7z a -mx=1 "$t/user-$(date +%Y%m%d_%H%M_est).7z" .; cd -'
alias e-user2-tar.ea='t=$(pwd); cd /media/$USER/YOUR-USB-DEVICE/user/; tar -cvf "$t/user-$(date +%Y%m%d_%H%M_est).tar" .; cd -'

# ADB
alias e-adb-kill.ea='killall adb; rm -R ~/.android/'
alias e-adb-plugdev.ea="sudo usermod -aG plugdev $LOGNAME"
alias e-adb-push.eat="eatz 'adb push IN /OUT/'"

# APP
alias e-app-apt-in.eat="eatz 'sudo apt install -y'"
alias e-app-apt-info.eat="eatz 'apt-cache --no-all-versions show zzz'"
alias e-app-apt-un.eat="eatz 'sudo apt purge --auto-remove -y'"
alias e-app-deb-in.eat="eatz 'sudo gdebi z.deb --n'"
alias e-app-dpkg-list.eat="eatz 'dpkg -l'"
alias e-app-dpkg-status.eat="eatz 'dpkg -s zzz'"
alias e-app-fpk-in.eat="eatz 'sudo flatpak install -y flathub XXX'"
alias e-app-fpk-un.eat="eatz 'flatpak uninstall --delete-data -y XXX'"

# INSTALL STUFF
alias e-install-vbox.eat="eatz 'sudo apt install -y virtualbox virtualbox-ext-pack; sudo usermod -a -G vboxusers \"\$USER\"'"
alias e-install-xed.eat="eatz 'sudo gdebi \"\$HOME/a-me/z-share/xed/xed1.deb\" --n; sudo gdebi \"\$HOME/a-me/z-share/xed/xed2.deb\" --n'"
alias e-install-chrome.eat="eatz 'rm /tmp/this.deb; wget -O /tmp/this.deb https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb; sudo gdebi /tmp/this.deb --n; rm /tmp/this.deb'"

# AV
alias e-av-av2av.eat="eatz 'ffmpeg -i IN OUT'"
alias e-av-join-mp4s.eat="eatz 'ffmpeg -f concat -safe 0 -i <(for f in ./*.mp4; do echo \"file '\''\$PWD/\$f'\''\"; done) -c:v libx264 -crf 23 -c:a aac -strict experimental output.mp4'"
alias e-av-mute-vid.eat="eatz 'ffmpeg -f lavfi -i aevalsrc=0 -i IN -c:v copy -c:a aac -map 0 -map 1:v -shortest OUT'"
alias e-av-opus4audio.eat="eatz 'ffmpeg -i IN -c:a libopus -b:a 16k OUT'"
alias e-av-trim-vid.eat="eatz 'ffmpeg -i INPUT.mp4 -ss 00:00:00 -to 00:00:00 -c:v copy -c:a copy OUTPUT.mp4'"
alias e-av-volume-vid.eat="eatz 'ffmpeg -i IN.mp4 -af volume=XXX -c:v copy OUT.mp4'"
alias e-av-yt2mp3.eat="eatz 'yt-dlp -f bestaudio -x --audio-format mp3 --audio-quality 0 --output \"X.mp3\" \"URL\"'"
alias e-av-yt2mp4.eat="eatz 'yt-dlp -f best -o \"X.mp4\" \"URL\"'"

# BARRIER
alias e-barrier.ea='sudo ufw disable; barrier >>/dev/null 2>&1 & disown'
alias e-barrierinfo.ea='clear; echo "disable ssl on host and clients in the app"'
alias e-barrieroff.ea='pkill barrier; sleep 1; sudo ufw enable'

# BASE64
alias e-base64-d.eat="eatz 'echo -n \"\ZZZ\" | base64 --decode'"
alias e-base64-d-xclip.ea='xclip -o -selection clipboard | base64 --decode | xclip -selection clipboard'
alias e-base64-e.eat="eatz 'echo -n \"ZZZ\" | base64'"
alias e-base64-e-xclip.ea='xclip -o -selection clipboard | base64 | xclip -selection clipboard'

# UI SETTINGS: (D)CONF & (G)SETTINGS
alias e-uid-2text.eat="eatz 'dconf dump / > dconf_all.txt'"
alias e-uid-4txt.eat="eatz 'dconf load / < dconf_all.txt'"
alias e-uid-watch.ea='dconf watch /'
alias e-uid-watchjournals.ea='journalctl -f | grep dconf'

alias e-uig-grep.eat="eatz 'gsettings list-recursively | grep \"X\"'"
alias e-uig-set.eat="eatz 'gsettings set # > /dev/null'"
alias e-uig-get.eat="eatz 'gsettings get #'"
alias e-uig-range.eat="eatz 'gsettings range #'"
alias e-uig-watch.eat="eatz 'gsettings monitor #'"
alias e-uig-set-fontsize.eat="eatz 'gsettings set org.cinnamon.desktop.interface text-scaling-factor 1.00 > /dev/null'"

# IMG
alias e-img-convert.eat="eatz 'for i in *.jpg; do convert \$i ../dir/\${i%.*}.png; done'"
alias e-img-gif.eat="eatz 'convert -delay 33 -dispose previous -filter triangle -loop 0 *.png animated.gif'"
alias e-img-montage.eat="eatz 'montage \$(for i in *.jpg; do convert -auto-orient \"\$i\" -rotate 0 \"\$i\"; echo \"\$i\"; done) -tile 5x5 -geometry +2+2 output.jpg'"
alias e-img-pdf2jpeg.eat="eatz 'pdftoppm -jpeg INPUT.pdf OUTPUT-PREFIX'"
alias e-img-pdf2png.eat="eatz 'pdftoppm -png INPUT.pdf OUTPUT-PREFIX'"
alias e-img-pdf.eat="eatz 'img2pdf 1.png 2.png 3.png -o OUTPUT.pdf'"
alias e-img-resize.eat="eatz 'for i in *.png; do convert \$i -resize 1000x1500 ../\${i%.*}.png; done'"
alias e-img-rotate.eat="eatz 'convert IN.png -background none -rotate 45 -trim +repage OUT.png'"
alias e-img-stack.eat="eatz 'convert -append 1.png 2.png 3.png OUTPUT.png'"
alias e-img-strip.eat="eatz 'mogrify -strip z.zzz'"
alias e-img-txt.eat="eatz 'tesseract IN ocr'"

# QR
alias e-qr-img.eat="$ztta 't=\"DATA\"; qrencode -o qr.png -s 10 --margin=1 \"\${t}\"'; $zttz;"
alias e-qr-img-transparent.eat="eatz 't=\"DATA\"; qrencode -o qr.png -s 10 --foreground=000000FF --background=00000000 --margin=1 \"\${t}\"'"
alias e-qr-reader.eat="eatz 'zbarimg QR-IMG-IN.IMG'"
alias e-qr-term.eat="eatz 't=\"DATA\"; qrencode -t ANSIUTF8 --margin=2 \"\${t}\"'"

# BAK / SYNC / MY FILES / CONFIGS
alias e-7za.eat="eatz '7z a -mx=1 <OUT>.7z <IN>'"
alias e-7zap.eat="eatz '7z a -mx=1 -p -mhe=on <OUT>.7z <IN>'"
alias e-7zx.eat="eatz '7z x IN.7z'"
alias e-7zap-split.eat="eatz '7z a -t7z -mhe=on -m0=lzma2 -mx=1 -p -v<MB>m -r OUT.7z IN'"
alias e-7zxp-split.eat="eatz '7z x IN.7z.001'"

alias e-tar2here.ea='zloc=$(zenity --file-selection --multiple --separator=" " --title="Select items to tar"); base_dir=$(dirname $zloc | head -n 1); tar_name=$(basename $base_dir); tar -cvf "$tar_name-$(date +%Y%m%d_%H%M_est).tar" -C "$base_dir" $zloc'
alias e-rsync.eat="eatz 'sudo rsync -avh --progress --delete --exclude=lost+found/ in/ out/'"
alias e-see-chromebak.ea='xdg-open ~/a-me/YOUR-PERSONAL-FOLDER/web-browsers/chrome/chrome.html >>/dev/null 2>&1 & disown'
alias e-clean-chrome.ea="bleachbit --clean google_chrome.cache google_chrome.history google_chrome.vacuum"
alias e-clean-langs.ea="sudo bleachbit --clean system.locales"
alias e-fix-imagemagic-pdf-issue.ea="sudo sed -i '/disable ghostscript format types/,+6d' /etc/ImageMagick-6/policy.xml"
alias e-html-here.ea="cp -r $PC_Ame/z-share/z-html-sites/z-html-starter/* ./"

alias e-vbox-userconfig.eat="eatz 'sudo usermod -a -G vboxusers $USER'"
alias e-xbindkeys-load.ea='xbindkeys --poll-rc'

# coding helpers (xdo)
alias e-ref-type_var.ea='sleep 5 && xdotool type "VAR=\$(cat <<'\''EOF'\''
CRAP
EOF
)"'

# ?????????
alias e-dd-iso.eat="eatz 'sudo dd if=IN of=/dev/OUT bs=4M status=progress'"
alias e-cat-tabwidth.eat="eatz 'cat zzz.txt | expand -t2'"
alias e-compare-comm.eat="eatz 'comm -23 <(sort -n new.txt) <(sort -n old.txt) >added.txt'"
alias e-csv-sort-dedup.eat="eatz 'tail -n +2 x.csv | sort | uniq > x2.csv'"
alias e-download-site.eat="eatz 'wget --exclude-directories=explorer -r -np -mpEk https://learnmeabitcoin.com/'"
alias e-figit4txt-eai="read -p 'FIGLET:' figitaaa; figlet -f slant \$figitaaa | sed -n 's/^.*/#&/p'"
alias e-http-serve.eat="eatz 'python3 -m http.server'"
alias e-ifs-current_setting.ea='echo "Your Current IFS:"; printf %q "$IFS"; echo'
alias e-link-sym.eat="eatz 'ln -s \"\$HOME/a-me/PLACE/\" \"\$HOME/NEW_LINK\"'"
alias e-textfold.eat="eatz 'fold -s -w80 X'"
alias e-tts4txt.eat="eatz 'spd-say -w \"\$(cat file.txt)\"'"
###########################################################################################################################################